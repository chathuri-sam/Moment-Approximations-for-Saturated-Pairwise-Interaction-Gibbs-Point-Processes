## This code replicates the Figure 1 in Fast approximation of the intensity of Gibbs point processes
#By Adrian Baddeley and Gopalan Nair 
#And adds the Poisson Saddlepoint Approximation of a special case of SPIGPP - Strauss process

library(dplyr)
library(spatstat)
library(ggplot2)
library(pracma)

# Parameters
r <- 0.05
beta <- 100
gamma_vals <- seq(0.1, 1, by=0.05)  # fewer values for speed
areaR <- pi * r^2
n_sim <- 1000  # number of simulations for averaging

intensity_exact <- numeric(length(gamma_vals))
intensity_poisson_saddle <- numeric(length(gamma_vals))
intensity_mean_field <- numeric(length(gamma_vals))

window <- owin(c(0, 1), c(0, 1))  # unit square

# Exact via simulation with confidence intervals
intensity_exact <- numeric(length(gamma_vals))
intensity_se <- numeric(length(gamma_vals))

for (i in seq_along(gamma_vals)) {
  gamma <- gamma_vals[i]
  
  # Define g(r) for Strauss process
  g <- function(dist) ifelse(dist <= r, gamma, 1) 
  
  # Mean-field
  log_g <- function(r) log(g(r))
  gamma_integrand <- function(r) -2 * pi * r * log_g(r)
  Gamma <- integrate(gamma_integrand, lower = 0, upper = r)$value

  if (abs(Gamma) < 1e-10) {
    intensity_mean_field[i] <- beta
  } else {
    intensity_mean_field[i] <- lambertWp(beta * Gamma) / Gamma
  }
  
  # Poisson-saddlepoint (Baddeley)
  
  # Calculate G = integral of 1 - g(u) over R^2
  g_integrand <- function(r) 2 * pi * r * (1 - g(r))
  G <- integrate(g_integrand, lower = 0, upper = r)$value
  #intensity_poisson_saddle[i] <- lambertWp(beta * G) / G
  if (abs(G) < 1e-10) {
    intensity_poisson_saddle[i] <- beta
  } else {
    intensity_poisson_saddle[i] <- lambertWp(beta * G) / G
  }
  
  # MCMC simulation
  intensities <- numeric(n_sim)
  for (j in 1:n_sim) {
    model <- rmhmodel(cif = "strauss",
                      par = list(beta = beta, gamma = gamma, r = r),
                      w = window)
    sim <- rmh(model, start = list(n.start = 100), control = list(nrep = 1e4))
    intensities[j] <- intensity(sim)
  }
  intensity_exact[i] <- mean(intensities)
  intensity_se[i] <- sd(intensities) / sqrt(n_sim)
  cat(sprintf("Gamma: %.2f, MC λ: %.2f ± %.2f\n", gamma, intensity_exact[i], 1.96 * intensity_se[i]))
}

#SPIGPP Saddle Point

#Conduct the approximation for each of the gamma values in the `gamma_vals` vector. 
#The example here uses the first value in the `gamma_vals ` vector.

gamma <- gamma_vals[1] # Interaction strength.  
alpha <- log(gamma)/2 for Strauss process
Rs <-  0.05   # Interaction radius
N <-  Inf   # Saturation parameter
S <- 1e5          # Number of simulations per n
epsilon <- 1e-4   # Accuracy threshold for truncation
model= "Geyer" 
beta0 =  log(beta)
lambda_init <- 1

#Calling the functions from the script `Homogeneous Intensity Approximation.R`
Nn <- find_Nn(N=N, alpha=alpha,Rs=Rs, S=S, epsilon=epsilon, lambda_guess=lambda_init,model=model)
lambda_star <- solve_lambda(alpha = alpha, Rs = Rs, N = N, Nn=Nn$Nn, S = S, epsilon = epsilon,
                            lambda_guess = lambda_init,model=model,beta0=beta0,V_expectations=Nn$V_expectations)

#All `lambda_star` values when computed will be similar to the vector below.
intensity_saddle_ppjsdm <- c(63.819086,64.984039,66.113542 , 67.164503, 68.479845, 69.959192, 71.451656, 72.919850 , 74.632054,
                76.416559,78.172287, 80.199228, 82.419670, 84.670311,87.259301,89.93702,92.97484 , 96.28596, 100 )

# Combine into data frames
df_exact <- data.frame(
  gamma = gamma_vals,
  intensity = intensity_exact,
  se = intensity_se,
  type = "Exact (MC)"
)

# Create a data frame for the approximations
df_approx <- data.frame(
  gamma = rep(gamma_vals, 3),
  intensity = c(intensity_poisson_saddle, intensity_mean_field, intensity_saddle_ppjsdm),
  method = factor(rep(c("Poisson Saddlepoint", "Mean Field", "Saddlepoint PPJSDM"), 
                      each = length(gamma_vals)))
)

# Plot
ggplot() +
  geom_line(data = df_approx, aes(x = gamma, y = intensity, color = method, linetype = method), linewidth = 0.7) +
  geom_point(data = df_exact, aes(x = gamma, y = intensity), shape = 21, fill = "black") +
  geom_errorbar(data = df_exact, aes(x = gamma, ymin = intensity - 1.96 * se, ymax = intensity + 1.96 * se), width = 0.02) +
  scale_color_manual(values = c("Poisson Saddlepoint" = "red", 
                                "Mean Field" = "orange", 
                                "Saddlepoint PPJSDM" = "blue")) +
  scale_linetype_manual(values = c("Poisson Saddlepoint" = "solid", 
                                   "Mean Field" = "solid", 
                                   "Saddlepoint PPJSDM" = "dashed")) +
  labs(
    title = "Intensity of Strauss Process with MC Error Bars",
    x = expression(gamma),
    y = expression(lambda),
    color = "Approximation",
    linetype = "Approximation"
  ) +
  theme_minimal()

