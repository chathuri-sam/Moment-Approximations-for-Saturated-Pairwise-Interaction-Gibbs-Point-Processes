library(ppjsdm)
library(spatstat)
library(ggplot2)
library(dplyr)
library(patchwork)

alpha <- log(gamma) # Interaction strength. 
Rs <-  0.05   # Interaction radius
N <-  2   # Saturation parameter
S <- 1e5          # Number of simulations per n
epsilon <- 1e-4   # Accuracy threshold for truncation
model= "Geyer" 
beta = 5 # Beta can be either 5, 10 or 100
beta0 =  log(beta)

#Simulate 1000 point processes to check the saddle-point lambda estimate
sims <- ppjsdm::rgibbs(nsim = 1000, beta0 = beta0, alpha = alpha, saturation = N, short_range = Rs, steps = 10000,model=model)
counts <- sapply(sims, function(conf) length(conf$x))

# Empirical intensity (mean number of points)
lambda_emp <- mean(counts)

# Standard deviation
lambda_sd <- sd(counts)

# Standard error of the mean
lambda_sem <- lambda_sd / sqrt(length(counts))

lambda_init <- 1
#Calling the functions from the script `Homogeneous Intensity Approximation.R`
Nn <- find_Nn(N=N, alpha=alpha,Rs=Rs, S=S, epsilon=epsilon, lambda_guess=lambda_init,model=model)

lambda_star <- solve_lambda(alpha = alpha, Rs = Rs, N = N, Nn=Nn$Nn, S = S, epsilon = epsilon,
                            lambda_guess = lambda_init,model=model,beta0=beta0,V_expectations=Nn$V_expectations)
cat(sprintf("Converged λ ≈ %.6f\n", lambda_star),sprintf("Empirical λ ≈ %.6f\n", lambda_emp))

#Plotting the Figure 2
##Geyer Saturation Process
saddle_data <- data.frame(
  beta = rep(c(5, 10 , 100
  ), each = 9),
  gamma = c(0.05, 0.10, 0.20, 0.50, 1.00, 2.00, 5.00, 10.00, 20.00), #,50.00
  lambda_ps = c(4.65, 4.66, 4.67, 4.74, 5.00, 6.38, 70.89, 381.203913, 1093.518021, #85.875211
                #, 99.59, #222.91, # beta = 5
                8.75,8.76,8.80, 9.05,10, 16.28,123.98,389.51,849.10, #550.45, # beta = 10
                48.46,49.27,51.07,60.88, 100, 220.69,506.48,  1000.28, 1977.86  # beta = 100
  ),  
  lambda_baddley = c(
      # beta = 5
      4.66, 4.66, 4.67, 4.74, 5.00, 6.37, 70.82, 182.28, 286.03,
      # beta = 10
      8.75, 8.76, 8.80, 9.05, 10.00, 16.29, 124.01, 233.48, 345.49,
      # beta = 100
      48.49, 49.23, 51.10, 60.85, 100.00, 220.67, 506.40, 1000.02, 2000.00
  ),
  lambda_sim = c(4.60,4.62, 4.74, 4.7, 5.04, 6.013, 14.36, 44.015, 113.029, #267.233, #beta=5
                 8.747, 8.686,8.648,8.99, 9.928,14.175,44.863,112.175, 218.856, #503.693, # beta = 10
                 44.94, 44.933,46.284,56.244,99.648,210.439, 503.538,992.545,1840.325  # beta = 100
  ) 
)

# Ensure beta is numeric for calculations
saddle_data <- saddle_data %>%
  mutate(beta = as.numeric(beta))

# Define minimum y-axis values for each beta
y_mins <- c(`5` = 4, `10` = 5, `100` = 30)

# Define subset plots
plots <- lapply(unique(saddle_data$beta), function(b) {
  df_sub <- saddle_data %>% filter(beta == b)
  b_char <- as.character(as.integer(b))
  
  p <- ggplot(df_sub, aes(x = gamma)) +
    geom_line(aes(y = lambda_ps, color = "Saddlepoint")) +
    geom_line(aes(y = b * gamma, color = "βγ"), linetype = "dashed") +
    geom_line(aes(y = lambda_sim, color = "Empirical")) +
    geom_line(aes(y = lambda_baddley, color = "Geyer")) +
    scale_x_log10() +
    scale_y_log10(limits = c(y_mins[[b_char]], NA)) +
    labs(
      x = expression(gamma),
      y = expression(lambda[PS]),
      title = bquote("β = " ~ .(b)),
      color="Method"
    ) +
    #scale_color_manual(values = c("Saddlepoint" = "blue", "βγ" = "red", "Empirical" = "black")) +
    theme_minimal(base_size = 14) 
  
  # Remove legend for the first two plots
  if (b %in% c(5, 10)) {
    p <- p + theme(legend.position = "none")
  }
  
  
  return(p)
})


